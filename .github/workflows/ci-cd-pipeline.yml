name: Spur Super App CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Static Analysis
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    outputs:
      has-security-issues: ${{ steps.security.outputs.has-issues }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: Run TypeScript type checking
        run: npm run typecheck

      - name: Security audit with npm audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Run Bandit security scan
        run: |
          pip install bandit[toml]
          bandit -r . -f json -o bandit-report.json || true
        continue-on-error: true

      - name: Analyze security results
        id: security
        run: |
          if [ -f bandit-report.json ]; then
            issues=$(jq '.results | length' bandit-report.json)
            if [ "$issues" -gt 0 ]; then
              echo "has-issues=true" >> $GITHUB_OUTPUT
            else
              echo "has-issues=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "has-issues=false" >> $GITHUB_OUTPUT
          fi

  # Unit and Integration Testing
  testing:
    name: Testing Suite
    runs-on: ${{ matrix.os }}
    needs: code-quality
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test

      - name: Run Playwright tests
        run: npm run test:playwright
        env:
          HEADLESS: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report-${{ matrix.os }}-${{ matrix.node-version }}
          path: playwright-report/
          retention-days: 30

  # Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: testing
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance benchmarks
        run: npm run test:performance

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Generate performance report
        run: |
          npm run test:performance:report
        continue-on-error: true

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            performance/
            lhci-reports/
          retention-days: 30

  # Security Testing
  security:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: code-quality
    if: needs.code-quality.outputs.has-security-issues != 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run OWASP ZAP baseline scan
        uses: zaproxy/action-baseline@v0.10.0
        continue-on-error: true
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Package
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [testing, security]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build web application
        run: npm run build:web

      - name: Build browser extension
        run: npm run build:extension

      - name: Build packages
        run: npm run build:packages

      - name: Package extension
        run: npm run package

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            dist-extension/
            dist-web/
            *.zip
          retention-days: 30

  # Container Security and Build
  container-build:
    name: Container Build and Security
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Container vulnerability scan
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'container-trivy-results.sarif'

      - name: Upload container scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'container-trivy-results.sarif'

  # Deployment - Development
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [container-build]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'development'
    environment: development

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to development environment
        run: |
          echo "Deploying to development environment..."
          # Add deployment commands here

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands here

  # Deployment - Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [container-build, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event.inputs.environment == 'staging'
    environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment..."
          # Add deployment commands here

      - name: Run integration tests against staging
        run: |
          echo "Running staging integration tests..."
          # Add staging test commands here

  # Deployment - Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [container-build, performance, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment..."
          # Add production deployment commands here

      - name: Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          # Add production test commands here

      - name: Create release tag
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${process.env.VERSION || '1.0.0'}`,
              name: `Release v${process.env.VERSION || '1.0.0'}`,
              body: 'Automated release from CI/CD pipeline',
              draft: false,
              prerelease: false
            })
            core.setOutput('release_id', release.id)

  # Browser Extension Store Deployment
  deploy-extension-stores:
    name: Deploy to Extension Stores
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build/

      - name: Deploy to Chrome Web Store
        run: |
          echo "Deploying to Chrome Web Store..."
          # Add Chrome Web Store deployment commands here
        env:
          CHROME_STORE_CLIENT_ID: ${{ secrets.CHROME_STORE_CLIENT_ID }}
          CHROME_STORE_CLIENT_SECRET: ${{ secrets.CHROME_STORE_CLIENT_SECRET }}
          CHROME_STORE_REFRESH_TOKEN: ${{ secrets.CHROME_STORE_REFRESH_TOKEN }}

      - name: Deploy to Firefox Add-ons
        run: |
          echo "Deploying to Firefox Add-ons..."
          # Add Firefox Add-ons deployment commands here
        env:
          FIREFOX_JWT_ISSUER: ${{ secrets.FIREFOX_JWT_ISSUER }}
          FIREFOX_JWT_SECRET: ${{ secrets.FIREFOX_JWT_SECRET }}

  # Documentation Deployment
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install documentation dependencies
        run: |
          npm ci
          npm install -g @redocly/cli

      - name: Build documentation
        run: |
          npm run docs:build

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/dist

  # Notify on Failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [testing, build, security]
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Send failure notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: '🚨 CI/CD Pipeline Failed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

      - name: Create GitHub issue for failed pipeline
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `CI/CD Pipeline Failed - ${{ github.run_number }}`,
              body: `The CI/CD pipeline failed on run #${{ github.run_number }}.

              **Workflow:** ${{ github.workflow }}
              **Branch:** ${{ github.ref_name }}
              **Commit:** ${{ github.sha }}
              **Actor:** ${{ github.actor }}
              **Run ID:** ${{ github.run_id }}

              Please investigate the failure and fix any issues.

              [View Run Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`,
              labels: ['ci-cd', 'bug', 'priority-high']
            })
        continue-on-error: true