name: Spur Steel Integration CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: '20'
  STEEL_API_KEY: ${{ secrets.STEEL_API_KEY }}

jobs:
  # Code Quality Checks
  quality:
    runs-on: ubuntu-latest
    name: Code Quality
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Run formatting check
        run: npm run format && git diff --exit-code

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    needs: quality
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

      - name: Generate coverage report
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: codecov-umbrella

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    name: Integration Tests
    needs: [quality, unit-tests]
    services:
      chrome:
        image: selenium/standalone-chrome:latest
        ports:
          - 4444:4444

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build integration bundle
        run: npm run build:integration

      - name: Run integration tests
        run: npm run test:integration
        env:
          STEEL_CHROME_URL: http://localhost:4444

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: test-results/

  # Build Steel Browser
  build-steel:
    runs-on: ubuntu-latest
    name: Build Steel Browser
    needs: [quality]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:all

      - name: Build Steel Browser
        run: npm run build:steel

      - name: Upload Steel build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: steel-browser-build
          path: steel-browser/dist/

  # Build Spur Integration
  build-spur:
    runs-on: ubuntu-latest
    name: Build Spur Integration
    needs: [quality, unit-tests]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Spur Integration
        run: npm run build:integration

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: spur-integration-build
          path: dist/

  # Security Audit
  security:
    runs-on: ubuntu-latest
    name: Security Audit
    needs: [quality]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # Performance Tests
  performance:
    runs-on: ubuntu-latest
    name: Performance Tests
    needs: [integration-tests, build-steel, build-spur]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: steel-browser-build
          path: steel-browser/dist/

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: spur-integration-build
          path: dist/

      - name: Run performance benchmarks
        run: npm run test:performance

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results/

  # Docker Build and Push
  docker:
    runs-on: ubuntu-latest
    name: Docker Build
    needs: [integration-tests, build-steel, build-spur, security]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.steel-dev
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: [docker, performance]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment commands here

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: [docker, performance]
    if: github.event_name == 'release'
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add deployment commands here

  # Create Release
  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    needs: [deploy-production]
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: spur-integration-build
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/**
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}